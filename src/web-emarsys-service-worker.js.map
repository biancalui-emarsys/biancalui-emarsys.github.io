{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/lib/logging.ts","webpack:///./src/lib/constants.ts","webpack:///./src/lib/utils.ts","webpack:///./src/lib/storage-with-log.ts","webpack:///./src/lib/jwt.ts","webpack:///./src/lib/me-device-event-service.ts","webpack:///./src/lib/me-client-service.ts","webpack:///./src/lib/me-v3-api-request.ts","webpack:///./src/lib/me-web-push-db.ts","webpack:///./src/lib/index-db.ts","webpack:///./src/web-emarsys-service-worker.ts","webpack:///./src/lib/emarsys-service-worker.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","SdkContext","NoopLogFn","loggingFunction","context","level","data","console","Logger","trace","debug","info","warn","error","log","exportedParts","enableLogger","enabled","methods","method","SwContext","defaultClientServiceApiBaseUrl","defaultDeviceEventServiceApiBaseUrl","defaultSafariPushPackageServiceUrl","defaultApplicationVersion","loginOverloadProtectionTime","pushTitleProperty","pushLinkProperty","pushIconProperty","pushImageProperty","pushActionsProperty","applicationPassword","dbKeyDefaultNotificationTitle","dbKeyDefaultNotificationIcon","dbKeyApplicationCode","dbKeyMeClientServiceApiBaseUrl","dbKeyMeDeviceEventServiceApiBaseUrl","dbKeyServiceWorkerUrl","dbKeyServiceWorkerScope","dbKeyApplicationServerPublicKey","dbKeyWebsitePushId","dbKeyPushPackageServiceUrl","dbKeyLastPermissionStatus","dbKeyInitParams","dbKeyBrowserId","dbKeyBrowserIds","dbKeyXClientState","dbKeyContactToken","dbKeyRefreshToken","dbKeySdkVersion","dbKeyServiceWorkerVersion","dbKeyPushToken","dbKeyContactFieldId","dbKeyContactFieldValue","dbKeyPlatform","dbKeyApplicationVersion","dbKeyDeviceModel","dbKeyOsVersion","dbKeyLanguage","dbKeyTimezone","dbKeyLoggingEnabled","dbKeyLastUsedAt","lsKeyLastLoginTime","lsKeyLastLoginToken","lsKeyLastContactFieldId","meLogin","meLogout","meOpen","meCustomEvent","indexedDbName","indexedDbVersion","PERMISSION_DENIED","PERMISSION_GRANTED","PERMISSION_PROMPT","EVENT_ON_READY","EVENT_ON_SUBSCRIBE","EVENT_ON_UNSUBSCRIBE","EVENT_ON_PERMISSION_PROMPT","EVENT_ON_PERMISSION_DENIED","EVENT_ON_PERMISSION_GRANTED","EVENT_ON_SW_INIT_ERROR","EVENT_ON_PUSH_DELIVERY","EVENT_ON_PUT_NEW_MESSAGE_TO_INBOX_STORE","EVENT_ON_UPDATE_INBOX_MESSAGES","EVENT_ON_SHOW_NOTIFICATION_PERMISSION_DIALOG","EVENT_ON_HIDE_NOTIFICATION_PERMISSION_DIALOG","KEY_DEVICE_REGISTRATION_STATUS","DEVICE_REGISTRATION_STATUS_REGISTERED","DEVICE_REGISTRATION_STATUS_UNREGISTERED","base64ToBinary","base64String","base64","repeat","length","replace","atob","async","checkDevice","meWebPushDb","getClientId","exists","clientState","getClientState","decodedClientState","JWT","decode","pushTokenExists","pushToken","identified","contactField","Function","rawData","outputArray","Uint8Array","charCodeAt","undefined","payloadMessageDataProperties","id","sid","applicationCode","notificationSettings","payload","emarsysPayload","messageData","keys","map","prop","reduce","acc","contactInfo","isEmptyObject","obj","params","scope","constructor","storage","this","defaultMessage","message","clientId","getContactToken","contactToken","getRefreshToken","refreshToken","token","options","pos","header","JSON","parse","urlB64ToString","split","err","PostEventsOKStates","MEDeviceEventService","baseUrl","desRequest","storageWithLog","StorageWithLog","postEvents","eventsData","success","apiEndpoint","response","post","includes","status","statusCode","body","json","stringify","path","appCode","getAppCode","MEClientService","meClientServiceRequest","storeClientDetails","clientDetails","getClientDetails","saveClientState","linkClientToContact","anonymous","toContactRequestBodyData","responseBody","Promise","all","setContactToken","setRefreshToken","generateAccessToken","registerPushToken","put","removePushToken","delete","headers","setClientState","platform","getPlatform","applicationVersion","getApplicationVersion","deviceModel","getDeviceModel","osVersion","getOsVersion","sdkVersion","getSdkVersion","language","getLanguage","timezone","getTimezone","Error","contactFieldId","fieldId","openIdToken","contactFieldValue","fieldValue","contactFieldEncrypted","encrypted","defaultHeaders","MEV3ApiRequest","requestOrder","endpoint","headerData","requestInit","createPostRequestInit","fetch","createPutRequestInit","createDeleteRequestInit","createRequestInit","buildHeaders","cache","Headers","forEach","k","append","MEWebPushDb","indexDb","getDefaultNotificationTitle","defaultTitle","getDBValueOrDefault","CONSTANTS","getDefaultNotificationIcon","defaultImage","getClientIdForAppCode","getBrowserIdsFromDb","toUpperCase","getClientIds","browserIdsString","browserIds","addLegacyBrowserId","legacyBrowserId","setDBValue","getInitParams","getMeClientServiceApiBaseUrl","getDBValue","getMeDeviceEventServiceApiBaseUrl","getWebsitePushId","getLastPermissionStatus","then","v","getApplicationServerPublicKey","getServiceWorkerUrl","getServiceWorkerScope","getServiceWorkerVersion","getPushToken","getContactFieldId","Number","getContactFieldValue","getPushPackageServiceUrl","getLoggingEnabled","flag","toLowerCase","setTimezone","setLanguage","setOsVersion","setDeviceModel","setApplicationVersion","setPlatform","setPushPackageServiceUrl","url","setContactFieldValue","setContactFieldId","toString","setMeClientServiceApiBaseUrl","setMeDeviceEventServiceApiBaseUrl","setPushToken","setServiceWorkerVersion","version","setSdkVersion","setLastPermissionStatus","setAppCode","setClientId","setClientIdForAppCode","setClientIds","clientIds","setDefaultNotificationIcon","icon","setDefaultNotificationTitle","setServiceWorkerUrl","setServiceWorkerScope","setApplicationServerPublicKey","setInitParams","setWebsitePushId","setLoggingEnabled","setLastUsedAt","Date","toISOString","deleteLastUsedAt","deleteDBKey","clearAll","NotFoundMessage","IndexDb","openIndexDB","database","resolve","reject","request","transaction","objectStore","onsuccess","indexedDBInstance","close","onerror","e","result","event","defaultVal","indexedDB","open","target","onupgradeneeded","createObjectStore","keyPath","webPushDb","worker","EmarsysServiceWorker","self","addEventListener","onPush","onNotificationClick","onInstall","onSubscriptionChange","FailureResult","waitUntil","handleInstall","_onPush","_onNotificationClick","_onSubscriptionChange","setupLogging","registration","payloadJson","isValidPayload","getNotificationOption","notificationTitle","notificationIcon","notificationImage","notificationActions","showNotification","createActionsFromActionButtons","action","notification","buttonClicked","find","actionButton","commands","push","clients","openWindow","reportOpen","applicationServerKey","getApplicationServerKey","subscription","pushManager","subscribe","userVisibleOnly","registerNewSubscription","isRetry","meClientSvc","getMeClientService","refreshContactToken","notificationOptions","image","actions","vibrate","notificationData","notificationDataPropertyName","dbFallbackFn","skipWaiting","loggingEnabled","des","getDeviceEventService","treatments","attributes","dnd","events","type","timestamp","clicks","viewedMessages","retrySendAfterContactTokenRefresh","meDeviceEventService","meClientService","actionButtons","title"],"mappings":"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","file":"web-emarsys-service-worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n","export type LogFn = (...args: any) => void\n\nconst SdkContext = '[WebEmarsysSDK]'\nconst SwContext = '[WebEmarsysSW]'\n\ninterface IConsoleLogging {\n  trace: LogFn\n  debug: LogFn\n  info: LogFn\n  warn: LogFn\n  error: LogFn\n  log: LogFn\n  [key: string]: LogFn // just for being able to loop over the entries\n}\n\n// tslint:disable-next-line:no-empty\nconst NoopLogFn: LogFn = () => {}\n\nconst loggingFunction = (context: string, level: string) => {\n  return (...data: any[]) => {\n    (console as any)[level](context, ...data)\n  }\n}\n\n/**\n * Enables the Logger by setting all log function references to the respective\n * functions of the global console.\n */\nfunction enableLogger (enabled: boolean, context: string = SdkContext) {\n  const methods = ['trace', 'debug', 'info', 'warn', 'error', 'log']\n  if (enabled) {\n    for (const method of methods) {\n      Logger[method] = loggingFunction(context, method)\n    }\n  } else {\n    for (const method of methods) {\n      Logger[method] = NoopLogFn\n    }\n  }\n}\n\n/**\n * The logger which provides logging functions. By default the functions\n * are disabled which means they point to the NoopLogFn.\n */\nconst Logger: IConsoleLogging = {\n  trace: NoopLogFn,\n  debug: NoopLogFn,\n  info: NoopLogFn,\n  warn: NoopLogFn,\n  error: NoopLogFn,\n  log: NoopLogFn\n}\n\nconst exportedParts = {\n  NoopLogFn,\n  enableLogger,\n  SdkContext,\n  SwContext,\n  Logger\n}\n\nexport default exportedParts\n","export const defaultClientServiceApiBaseUrl = 'https://me-client.eservice.emarsys.net/v3'\nexport const defaultDeviceEventServiceApiBaseUrl = 'https://mobile-events.eservice.emarsys.net/v3'\nexport const defaultSafariPushPackageServiceUrl = 'https://me-client.eservice.emarsys.net'\n\nexport const defaultApplicationVersion = '0.0.0'\n\nexport const loginOverloadProtectionTime = 3600000\n\nexport const pushTitleProperty = 'title'\n\n// property names in push notification data\nexport const pushLinkProperty = 'link'\nexport const pushIconProperty = 'icon'\nexport const pushImageProperty = 'image'\nexport const pushActionsProperty = 'actions'\n\n// ingester requests password\nexport const applicationPassword = 'not-used'\n\n// indexDb keys\nexport const dbKeyDefaultNotificationTitle = 'pushDefaultNotificationTitle'\nexport const dbKeyDefaultNotificationIcon = 'pushDefaultNotificationIcon'\nexport const dbKeyApplicationCode = 'emarsysApplicationCode'\nexport const dbKeyMeClientServiceApiBaseUrl = 'meClientServiceApiBaseUrl'\nexport const dbKeyMeDeviceEventServiceApiBaseUrl = 'meDeviceEventServiceApiBaseUrl'\nexport const dbKeyServiceWorkerUrl = 'serviceWorkerUrl'\nexport const dbKeyServiceWorkerScope = 'serviceWorkerScope'\nexport const dbKeyApplicationServerPublicKey = 'applicationServerPublicKey'\nexport const dbKeyWebsitePushId = 'websitePushId'\nexport const dbKeyPushPackageServiceUrl = 'pushPackageServiceUrl'\nexport const dbKeyLastPermissionStatus = 'lastPermissionStatus'\nexport const dbKeyInitParams = 'initParams'\nexport const dbKeyBrowserId = 'browserId'\nexport const dbKeyBrowserIds = 'browserIds'\nexport const dbKeyXClientState = 'xClientState'\nexport const dbKeyContactToken = 'contactToken'\nexport const dbKeyRefreshToken = 'refreshToken'\nexport const dbKeySdkVersion = 'sdkVersion'\nexport const dbKeyServiceWorkerVersion = 'serviceWorkerVersion'\nexport const dbKeyPushToken = 'pushToken'\nexport const dbKeyContactFieldId = 'contactFieldId'\nexport const dbKeyContactFieldValue = 'contactFieldValue'\nexport const dbKeyPlatform = 'platform'\nexport const dbKeyApplicationVersion = 'applicationVersion'\nexport const dbKeyDeviceModel = 'deviceModel'\nexport const dbKeyOsVersion = 'osVersion'\nexport const dbKeyLanguage = 'language'\nexport const dbKeyTimezone = 'timezone'\nexport const dbKeyLoggingEnabled = 'loggingEnabled'\nexport const dbKeyLastUsedAt = 'lastUsedAt'\n\n// localStorage keys\nexport const lsKeyLastLoginTime = 'emarsysWebpushLastLoginTime'\nexport const lsKeyLastLoginToken = 'emarsysWebpushLastLoginToken'\nexport const lsKeyLastContactFieldId = 'emarsysWebpushLastContactFieldId'\n\n// ME endpoints\nexport const meLogin = '/users/login'\nexport const meLogout = '/users/logout'\nexport const meOpen = '/events/message_open'\nexport const meCustomEvent = '/events/'\n\n// Indexed DB\nexport const indexedDbName = 'EMARSYS_WEBPUSH_STORE'\nexport const indexedDbVersion = 1\n\n// Permissions\nexport const PERMISSION_DENIED = 'denied'\nexport const PERMISSION_GRANTED = 'granted'\nexport const PERMISSION_PROMPT = 'default'\n\n// Events\nexport const EVENT_ON_READY = 'onReady'\nexport const EVENT_ON_SUBSCRIBE = 'onSubscribe'\nexport const EVENT_ON_UNSUBSCRIBE = 'onUnsubscribe'\nexport const EVENT_ON_PERMISSION_PROMPT = 'onPermissionPrompt'\nexport const EVENT_ON_PERMISSION_DENIED = 'onPermissionDenied'\nexport const EVENT_ON_PERMISSION_GRANTED = 'onPermissionGranted'\nexport const EVENT_ON_SW_INIT_ERROR = 'onSWInitError'\nexport const EVENT_ON_PUSH_DELIVERY = 'onPushDelivery'\nexport const EVENT_ON_PUT_NEW_MESSAGE_TO_INBOX_STORE = 'onPutNewMessageToInboxStore'\nexport const EVENT_ON_UPDATE_INBOX_MESSAGES = 'onUpdateInboxMessages'\nexport const EVENT_ON_SHOW_NOTIFICATION_PERMISSION_DIALOG = 'onShowNotificationPermissionDialog'\nexport const EVENT_ON_HIDE_NOTIFICATION_PERMISSION_DIALOG = 'onHideNotificationPermissionDialog'\n\n// LocalStore\nexport const KEY_DEVICE_REGISTRATION_STATUS = 'registrationStatus'\n\n// Device registration status\nexport const DEVICE_REGISTRATION_STATUS_REGISTERED: string = 'registered'\nexport const DEVICE_REGISTRATION_STATUS_UNREGISTERED: string = 'unregistered'\n","import { MEWebPushDb } from './me-web-push-db'\nimport * as JWT from './jwt'\n\nexport type DeviceCheckResult = {\n  exists: boolean\n  pushTokenExists?: boolean\n  identified?: boolean\n}\n\nexport function getVersion () {\n  return __VERSION__\n}\n\nexport function getGlobal () {\n  /* eslint-disable */\n  return Function('return this')()\n}\n\nfunction base64ToBinary (base64String: string): string {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4)\n  const base64 = (base64String + padding)\n    .replace(/-/g, '+')\n    .replace(/_/g, '/')\n\n  return atob(base64)\n}\n\nexport function urlB64ToUint8Array (base64String: string): Uint8Array {\n  const rawData = base64ToBinary(base64String)\n  const outputArray = new Uint8Array(rawData.length)\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i)\n  }\n\n  return outputArray\n}\n\nexport function urlB64ToString (base64String: string): string {\n  return base64ToBinary(base64String)\n}\n\nexport async function isDeviceRegistered (meWebPushDb: MEWebPushDb): Promise<boolean> {\n  const { exists, pushTokenExists } = await checkDevice(meWebPushDb)\n  const hasPushToken = pushTokenExists !== undefined ? pushTokenExists : false\n  return (exists && hasPushToken)\n}\n\n/**\n * Returns basic information about registration, push token and identified contact\n * based on the content of the client state\n */\nexport async function checkDevice (meWebPushDb: MEWebPushDb): Promise<DeviceCheckResult> {\n  const clientId = await meWebPushDb.getClientId()\n\n  if (!clientId) {\n    return { exists: false }\n  }\n\n  const clientState = await meWebPushDb.getClientState()\n  if (!clientState) {\n    return { exists: false }\n  }\n\n  const decodedClientState = JWT.decode(clientState)\n  if (!decodedClientState) {\n    return { exists: false }\n  }\n\n  const pushToken = decodedClientState.pushToken || null\n  const contactField = decodedClientState.contactField || null\n  return {\n    exists: true,\n    pushTokenExists: pushToken !== null,\n    identified: contactField !== null\n  }\n}\n\nexport const payloadMessageDataProperties: {[index: string]: string} = {\n  id: 'string',\n  sid: 'string',\n  applicationCode: 'string',\n  notificationSettings: 'object'\n}\n\n/**\n * Check if the WebPush Message payload is produced by Emarsys.\n * @param payload\n * @returns true if it is an Emarsys Payload\n */\nexport function isValidPayload (payload: any): boolean {\n  if (typeof payload !== 'object') return false\n  const emarsysPayload = payload.messageData\n  if (!emarsysPayload) return false\n  const isValidProperty = (prop: string) => {\n    return emarsysPayload[prop]\n      ? (typeof emarsysPayload[prop]) === payloadMessageDataProperties[prop]\n      : false\n  }\n  const result = Object.keys(payloadMessageDataProperties)\n    .map(isValidProperty)\n    .reduce((acc, r) => acc && r, true)\n  return result\n}\n\n/**\n * Checks the passed data and returns either the ContactInfo or undefined if the data does not fit\n * @param contactInfo The data which shall be converted\n */\nexport function toContactInfo (contactInfo?: {} | ContactInfo | undefined): ContactInfo | undefined {\n  if (contactInfo === undefined || Object.keys(contactInfo).length !== 3) {\n    return undefined\n  }\n  return contactInfo as ContactInfo\n}\n\nexport const isEmptyObject = (obj: any) => {\n  if (obj === null) return true\n  /* eslint-disable */\n  if (obj === undefined) return true\n  for (const property in obj) {\n    return false\n  }\n  return true\n}\n\nexport function determineServiceWorkerScope (params?: ServiceWorkerParams): string | undefined {\n  if (params) {\n    return params.scope\n  } else {\n    return undefined\n  }\n}\n","import logging from './logging'\nimport { MEWebPushDb } from './me-web-push-db'\nconst { Logger } = logging\n\ntype Params = {\n  level?: string\n  message?: string\n}\n\nexport class StorageWithLog {\n  private readonly storage: MEWebPushDb\n\n  constructor (storage: MEWebPushDb) {\n    this.storage = storage\n  }\n\n  private log (value: string | undefined, defaultMessage: string, params?: Params) {\n    const { level = 'error', message = defaultMessage } = params ?? {}\n    if (!value) Logger[level](message)\n    return value\n  }\n\n  async getClientId (params?: Params): Promise<string | undefined> {\n    const defaultMessage = 'Error: No client ID set for the browser!'\n    const clientId = await this.storage.getClientId()\n    return this.log(clientId, defaultMessage, params)\n  }\n\n  async getContactToken (params?: Params): Promise<string | undefined> {\n    const defaultMessage = 'Error: No contact token set!'\n    const contactToken = await this.storage.getContactToken()\n    return this.log(contactToken, defaultMessage, params)\n  }\n\n  async getClientState (params?: Params): Promise<string | undefined> {\n    const defaultMessage = 'Error: No client state set!'\n    const clientState = await this.storage.getClientState()\n    return this.log(clientState, defaultMessage, params)\n  }\n\n  async getRefreshToken (params?: Params): Promise<string | undefined> {\n    const defaultMessage = 'Unable to refresh contact token a refresh-token is missing!'\n    const refreshToken = await this.storage.getRefreshToken()\n    return this.log(refreshToken, defaultMessage, params)\n  }\n}\n","import { urlB64ToString } from './utils'\nimport logging from './logging'\n\nexport type DecodeOptions = {\n  header?: boolean\n}\n\nexport type DecodedToken = { [key: string]: any }\n\nexport function decode (token: string, options?: DecodeOptions): DecodedToken | null {\n  const opts = options ?? {}\n  const pos = opts.header === true ? 0 : 1\n  try {\n    return JSON.parse(urlB64ToString(token.split('.')[pos]))\n  } catch (err) {\n    logging.Logger.error('Error decoding token', err)\n    return null\n  }\n}\n","import logging from './logging'\nimport { MEV3ApiRequest } from './me-v3-api-request'\nimport { MEWebPushDb } from './me-web-push-db'\nimport { StorageWithLog } from './storage-with-log'\n\nconst { Logger } = logging\n\ntype MEEventType = 'internal' | 'custom' | 'other'\n\nexport type WebPushTreatments = {\n  ac?: { id: number, run_id: string }\n  rti?: { id: string, run_id: string }\n  ui?: { id: number, run_id: string }\n  ui_test?: { id: number, run_id: string }\n}\n\nexport type MEEventAttributes = Record<string, string>\n\nexport type MEEvent = {\n  type: MEEventType\n  name: string\n  timestamp: string\n  attributes?: MEEventAttributes\n}\n\n/**\n * The data we send\n */\nexport type MEEventsRequestData = {\n  dnd?: boolean\n  events: MEEvent[]\n  viewedMessages: any[]\n  clicks: any[]\n}\n\nexport type ClientDetails = {\n  platform: string\n  applicationVersion?: string\n  deviceModel?: string\n  osVersion?: string\n  sdkVersion?: string\n  language?: string\n  timezone?: string\n}\n\nexport type PostEventsResult = { success: boolean, statusCode?: number }\n\nconst PostEventsOKStates = [200, 204]\n\nexport class MEDeviceEventService {\n  private storage: MEWebPushDb\n  private readonly storageWithLog: StorageWithLog\n  private readonly baseUrl: string\n  private desRequest: MEV3ApiRequest\n\n  constructor (\n    baseUrl: string,\n    desRequest: MEV3ApiRequest,\n    storage: MEWebPushDb\n  ) {\n    this.storage = storage\n    this.storageWithLog = new StorageWithLog(storage)\n    this.baseUrl = `${baseUrl}/apps`\n    this.desRequest = desRequest\n  }\n\n  /**\n   * Post the passed data which includes 1 or more events to the device event service\n   * @param eventsData The events which shall be forwarded to the DES.\n   * @returns A promise which resolves to a PostEventsResult which indicates the success\n   *          of the operation and contains the returned status code.\n   */\n  async postEvents (eventsData: MEEventsRequestData): Promise<PostEventsResult> {\n    const clientId = await this.storageWithLog.getClientId()\n    const contactToken = await this.storageWithLog.getContactToken()\n    const clientState = await this.storageWithLog.getClientState()\n    if (!clientId || !contactToken || !clientState) {\n      return { success: false }\n    }\n    const apiEndpoint = await this.apiEndpoint('client/events')\n    const response = await this.desRequest.post(apiEndpoint, eventsData, { clientId, clientState, contactToken })\n    if (PostEventsOKStates.includes(response.status)) {\n      return { success: true, statusCode: response.status }\n    } else {\n      const body = await response.json()\n      Logger.warn('Error posting events to device event service', response.status, JSON.stringify(body))\n      return { success: false, statusCode: response.status }\n    }\n  }\n\n  private async apiEndpoint (path: string): Promise<string> {\n    const appCode = await this.storage.getAppCode()\n    return `${this.baseUrl}/${appCode!}/${path}`\n  }\n\n  static create (\n    baseUrl: string,\n    desRequest: MEV3ApiRequest,\n    storage: MEWebPushDb\n  ) {\n    return new MEDeviceEventService(baseUrl, desRequest, storage)\n  }\n}\n","import logging from './logging'\nimport { MEV3ApiRequest } from './me-v3-api-request'\nimport { MEWebPushDb } from './me-web-push-db'\nimport { StorageWithLog } from './storage-with-log'\n\nconst { Logger } = logging\n\ntype ContactRequestBodyData = {\n  anonymous: boolean\n  body: { contactFieldId: number, contactFieldValue: string, contactFieldEncrypted: boolean } |\n  { contactFieldId: number, openIdToken: string } | {}\n}\n\nexport type ClientDetails = {\n  platform: string\n  applicationVersion?: string\n  deviceModel?: string\n  osVersion?: string\n  sdkVersion?: string\n  language?: string\n  timezone?: string\n}\n\nexport class MEClientService {\n  private readonly storage: MEWebPushDb\n  private readonly storageWithLog: StorageWithLog\n  private readonly baseUrl: string\n  private meClientServiceRequest: MEV3ApiRequest\n\n  constructor (\n    baseUrl: string,\n    meClientServiceRequest: MEV3ApiRequest,\n    storage: MEWebPushDb\n  ) {\n    this.storage = storage\n    this.storageWithLog = new StorageWithLog(storage)\n    this.baseUrl = `${baseUrl}/domains`\n    this.meClientServiceRequest = meClientServiceRequest\n  }\n\n  /**\n   * Create or update the information which is related to a specific browser\n   */\n  async storeClientDetails (): Promise<boolean> {\n    const clientId = await this.storageWithLog.getClientId()\n    if (!clientId) {\n      return false\n    }\n    const apiEndpoint = await this.apiEndpoint('client')\n    const clientState = await this.storage.getClientState()\n    const clientDetails = await this.getClientDetails()\n    const response = await this.meClientServiceRequest.post(apiEndpoint, clientDetails, { clientId, clientState })\n    if (response.status === 204) {\n      await this.saveClientState(response)\n      return true\n    } else {\n      const body = await response.json()\n      Logger.error('Error storing client info', response.status, JSON.stringify(body))\n      return false\n    }\n  }\n\n  async linkClientToContact (contactInfo?: ContactInfo | OpenIdContactInfo): Promise<boolean> {\n    const clientId = await this.storageWithLog.getClientId()\n    const clientState = await this.storageWithLog.getClientState({ level: 'info' })\n    if (!clientId || !clientState) {\n      return false\n    }\n    const { anonymous, body } = this.toContactRequestBodyData(contactInfo)\n    const apiEndpoint = `${await this.apiEndpoint('client/contact')}${anonymous ? '?anonymous=true' : ''}`\n    const response = await this.meClientServiceRequest.post(apiEndpoint, body, { clientId, clientState })\n    if (response.status === 200) {\n      await this.saveClientState(response)\n      const responseBody = await response.json()\n      if (responseBody.contactToken && responseBody.refreshToken) {\n        await Promise.all([\n          this.storage.setContactToken(responseBody.contactToken),\n          this.storage.setRefreshToken(responseBody.refreshToken)\n        ])\n        return true\n      } else {\n        Logger.error('At least one of the expected response parts missing!')\n        return false\n      }\n    } else {\n      const body = await response.json()\n      Logger.error('Error linking contact to client', response.status, JSON.stringify(body))\n      return false\n    }\n  }\n\n  async generateAccessToken (): Promise<boolean> {\n    const clientId = await this.storageWithLog.getClientId()\n    const refreshToken = await this.storageWithLog.getRefreshToken()\n    const clientState = await this.storageWithLog.getClientState()\n    if (!clientId || !refreshToken || !clientState) {\n      return false\n    }\n    const apiEndpoint = await this.apiEndpoint('client/contact-token')\n    const body = { refreshToken }\n    const response = await this.meClientServiceRequest.post(apiEndpoint, body, { clientId, clientState })\n    if (response.status === 200) {\n      const responseBody = await response.json()\n      if (responseBody.contactToken) {\n        await this.storage.setContactToken(responseBody.contactToken)\n        return true\n      } else {\n        Logger.error('ContactToken is not part of response body!')\n        return false\n      }\n    } else {\n      const body = await response.json()\n      Logger.log('Error refreshing the contact token', response.status, JSON.stringify(body))\n      return false\n    }\n  }\n\n  async registerPushToken (pushToken: string): Promise<boolean> {\n    const clientId = await this.storageWithLog.getClientId()\n    const clientState = await this.storageWithLog.getClientState()\n    const contactToken = await this.storageWithLog.getContactToken({ message: 'Unable to register subscription as contactToken is missing!' })\n    if (!clientId || !clientState || !contactToken) {\n      return false\n    }\n\n    const apiEndpoint = await this.apiEndpoint('client/push-token')\n    const body = { pushToken }\n    const response = await this.meClientServiceRequest.put(apiEndpoint, body, { clientId, clientState, contactToken })\n    if (response.status === 204) {\n      await this.saveClientState(response)\n      return true\n    } else {\n      const body = await response.json()\n      Logger.error('Error registering the subscription', response.status, JSON.stringify(body))\n      return false\n    }\n  }\n\n  async removePushToken (): Promise<boolean> {\n    Logger.info('Remove push token')\n    const clientId = await this.storageWithLog.getClientId()\n    const clientState = await this.storageWithLog.getClientState({ level: 'info' })\n    const contactToken = await this.storageWithLog.getContactToken({ level: 'info' })\n    if (!clientId || !clientState || !contactToken) {\n      return false\n    }\n    const apiEndpoint = await this.apiEndpoint('client/push-token')\n    const response = await this.meClientServiceRequest.delete(apiEndpoint, {}, { clientId, clientState, contactToken })\n    if (response.status === 204) {\n      await this.saveClientState(response)\n      return true\n    } else {\n      const body = await response.json()\n      Logger.error('Error removing a subscription', response.status, JSON.stringify(body))\n      return true\n    }\n  }\n\n  private async apiEndpoint (path: string): Promise<string> {\n    const appCode = await this.storage.getAppCode()\n    return `${this.baseUrl}/${appCode!}/${path}`\n  }\n\n  private async saveClientState (response: Response) {\n    const clientState = response.headers.get('x-client-state')\n    if (clientState) {\n      await this.storage.setClientState(clientState)\n    } else {\n      Logger.error('Error: X-Client-State not found in response header!')\n    }\n  }\n\n  private async getClientDetails (): Promise<ClientDetails> {\n    const platform = await this.storage.getPlatform()\n    if (platform) {\n      const applicationVersion = await this.storage.getApplicationVersion()\n      const deviceModel = await this.storage.getDeviceModel()\n      const osVersion = await this.storage.getOsVersion()\n      const sdkVersion = await this.storage.getSdkVersion()\n      const language = await this.storage.getLanguage()\n      const timezone = await this.storage.getTimezone()\n      return {\n        platform,\n        applicationVersion,\n        deviceModel,\n        osVersion,\n        sdkVersion,\n        language,\n        timezone\n      }\n    } else {\n      throw new Error('platform not found in storage!')\n    }\n  }\n\n  private toContactRequestBodyData (contactInfo?: ContactInfo | OpenIdContactInfo): ContactRequestBodyData {\n    if (!contactInfo) {\n      return {\n        body: {},\n        anonymous: true\n      }\n    }\n\n    if ('openIdToken' in contactInfo) {\n      return {\n        body: {\n          contactFieldId: contactInfo.fieldId,\n          openIdToken: contactInfo.openIdToken\n        },\n        anonymous: false\n      }\n    }\n\n    return {\n      body: {\n        contactFieldId: contactInfo.fieldId,\n        contactFieldValue: contactInfo.fieldValue,\n        contactFieldEncrypted: contactInfo.encrypted\n      },\n      anonymous: false\n    }\n  }\n\n  static create (\n    baseUrl: string,\n    meClientServiceRequest: MEV3ApiRequest,\n    storage: MEWebPushDb\n  ) {\n    return new MEClientService(baseUrl, meClientServiceRequest, storage)\n  }\n}\n","const defaultHeaders: { [key: string]: string } = {\n  'Content-Type': 'application/json'\n}\n\nexport type HeaderData = {\n  clientId: string\n  clientState?: string\n  contactToken?: string\n}\n\nexport class MEV3ApiRequest {\n  private requestOrder: number\n\n  constructor () {\n    this.requestOrder = 0\n  }\n\n  async post (endpoint: string, body: object, headerData: HeaderData): Promise<Response> {\n    const requestInit: RequestInit = this.createPostRequestInit(body, headerData)\n    return fetch(endpoint, requestInit)\n  }\n\n  async put (endpoint: string, body: object, headerData: HeaderData): Promise<Response> {\n    const requestInit: RequestInit = this.createPutRequestInit(body, headerData)\n    return fetch(endpoint, requestInit)\n  }\n\n  async delete (endpoint: string, body: object, headerData: HeaderData): Promise<Response> {\n    const requestInit: RequestInit = this.createDeleteRequestInit(body, headerData)\n    return fetch(endpoint, requestInit)\n  }\n\n  private createPostRequestInit (body: object, headerData: HeaderData): RequestInit {\n    return this.createRequestInit('POST', body, headerData)\n  }\n\n  private createPutRequestInit (body: object, headerData: HeaderData): RequestInit {\n    return this.createRequestInit('PUT', body, headerData)\n  }\n\n  private createDeleteRequestInit (body: object, headerData: HeaderData): RequestInit {\n    return this.createRequestInit('DELETE', body, headerData)\n  }\n\n  private createRequestInit (method: string, body: object, headerData: HeaderData): RequestInit {\n    return {\n      method,\n      headers: this.buildHeaders(headerData),\n      mode: 'cors',\n      cache: 'default',\n      body: JSON.stringify(body)\n    }\n  }\n\n  private buildHeaders (headerData: HeaderData) {\n    const headers: Headers = new Headers()\n\n    Object.keys(defaultHeaders).forEach(k => {\n      headers.append(k, defaultHeaders[k])\n    })\n\n    headers.append('x-client-id', headerData.clientId)\n\n    if (headerData.clientState) {\n      headers.append('x-client-state', headerData.clientState)\n    }\n\n    if (headerData.contactToken) {\n      headers.append('x-contact-token', headerData.contactToken)\n    }\n\n    headers.append('x-request-order', `${this.requestOrder}`)\n    this.requestOrder += 1\n\n    return headers\n  }\n\n  static create (): MEV3ApiRequest {\n    return new MEV3ApiRequest()\n  }\n}\n","import * as CONSTANTS from './constants'\nimport { IndexDb } from './index-db'\n\n/**\n * The ME web push persisted information\n */\nexport class MEWebPushDb {\n  private readonly indexDb: IndexDb\n  private appCode: string | undefined\n\n  constructor (indexDb: IndexDb) {\n    this.indexDb = indexDb\n  }\n\n  async getDefaultNotificationTitle (defaultTitle: string): Promise<string> {\n    return (this.indexDb.getDBValueOrDefault(CONSTANTS.dbKeyDefaultNotificationTitle, defaultTitle) as Promise<string>)\n  }\n\n  async getDefaultNotificationIcon (defaultImage: string | undefined): Promise<string | undefined> {\n    return this.indexDb.getDBValueOrDefault(CONSTANTS.dbKeyDefaultNotificationIcon, defaultImage)\n  }\n\n  async getClientIdForAppCode (appCode: string | undefined): Promise<string | undefined> {\n    if (appCode !== undefined) {\n      const browserIds: ClientIdList = await this.getBrowserIdsFromDb()\n      return browserIds[appCode.toUpperCase()]\n    }\n  }\n\n  async getClientIds (): Promise<ClientIdList | undefined> {\n    return this.getBrowserIdsFromDb()\n  }\n\n  private async getBrowserIdsFromDb (): Promise<ClientIdList> {\n    const browserIdsString: string | undefined = await this.indexDb.getDBValueOrDefault(CONSTANTS.dbKeyBrowserIds)\n    let browserIds: { [appCode: string]: string } = {}\n    if (browserIdsString !== undefined) {\n      // tslint:disable-next-line:no-empty\n      try { browserIds = JSON.parse(browserIdsString) } catch (err) { }\n    }\n    browserIds = await this.addLegacyBrowserId(browserIds)\n    return browserIds\n  }\n\n  private async addLegacyBrowserId (browserIds: ClientIdList): Promise<ClientIdList> {\n    const legacyBrowserId = await this.indexDb.getDBValueOrDefault(CONSTANTS.dbKeyBrowserId)\n    if (legacyBrowserId !== undefined) {\n      const parts = legacyBrowserId.split('_')\n      browserIds[parts[0].toUpperCase()] = legacyBrowserId\n      await this.indexDb.setDBValue(CONSTANTS.dbKeyBrowserIds, JSON.stringify(browserIds))\n      await this.indexDb.setDBValue(CONSTANTS.dbKeyBrowserId, undefined)\n    }\n    return browserIds\n  }\n\n  async getInitParams (): Promise<IInitParams | undefined> {\n    const params = await this.indexDb.getDBValueOrDefault(CONSTANTS.dbKeyInitParams)\n    return params ? JSON.parse(params) : undefined\n  }\n\n  async getMeClientServiceApiBaseUrl (): Promise<string> {\n    return this.indexDb.getDBValue(CONSTANTS.dbKeyMeClientServiceApiBaseUrl)\n  }\n\n  async getMeDeviceEventServiceApiBaseUrl (): Promise<string> {\n    return this.indexDb.getDBValue(CONSTANTS.dbKeyMeDeviceEventServiceApiBaseUrl)\n  }\n\n  async getClientId (): Promise<string | undefined> {\n    const appCode = await this.getAppCode()\n    return this.getClientIdForAppCode(appCode)\n  }\n\n  async getClientState (): Promise<string | undefined> {\n    return this.indexDb.getDBValueOrDefault(CONSTANTS.dbKeyXClientState)\n  }\n\n  async getRefreshToken (): Promise<string | undefined> {\n    return this.indexDb.getDBValueOrDefault(CONSTANTS.dbKeyRefreshToken)\n  }\n\n  async getContactToken (): Promise<string | undefined> {\n    return this.indexDb.getDBValueOrDefault(CONSTANTS.dbKeyContactToken)\n  }\n\n  async getAppCode (): Promise<string | undefined> {\n    if (!this.appCode) {\n      this.appCode = await this.indexDb.getDBValueOrDefault(CONSTANTS.dbKeyApplicationCode)\n    }\n    return this.appCode\n  }\n\n  async getWebsitePushId (): Promise<string | undefined> {\n    return this.indexDb.getDBValueOrDefault(CONSTANTS.dbKeyWebsitePushId)\n  }\n\n  async getLastPermissionStatus (): Promise<NotificationPermission | undefined> {\n    return this.indexDb\n      .getDBValueOrDefault(CONSTANTS.dbKeyLastPermissionStatus)\n      .then(v => v as NotificationPermission)\n  }\n\n  async getApplicationServerPublicKey (): Promise<string | undefined> {\n    return this.indexDb.getDBValueOrDefault(CONSTANTS.dbKeyApplicationServerPublicKey)\n  }\n\n  async getServiceWorkerUrl (): Promise<string | undefined> {\n    return this.indexDb.getDBValueOrDefault(CONSTANTS.dbKeyServiceWorkerUrl)\n  }\n\n  async getServiceWorkerScope (): Promise<string | undefined> {\n    return this.indexDb.getDBValueOrDefault(CONSTANTS.dbKeyServiceWorkerScope)\n  }\n\n  async getSdkVersion (): Promise<string | undefined> {\n    return this.indexDb.getDBValueOrDefault(CONSTANTS.dbKeySdkVersion)\n  }\n\n  async getServiceWorkerVersion (): Promise<string | undefined> {\n    return this.indexDb.getDBValueOrDefault(CONSTANTS.dbKeyServiceWorkerVersion)\n  }\n\n  async getPushToken (): Promise<string | undefined> {\n    return this.indexDb.getDBValueOrDefault(CONSTANTS.dbKeyPushToken)\n  }\n\n  async getContactFieldId (): Promise<number | undefined> {\n    const fieldId = await this.indexDb.getDBValueOrDefault(CONSTANTS.dbKeyContactFieldId)\n    return fieldId ? Number(fieldId) : undefined\n  }\n\n  async getContactFieldValue (): Promise<string | undefined> {\n    return this.indexDb.getDBValueOrDefault(CONSTANTS.dbKeyContactFieldValue)\n  }\n\n  async getPushPackageServiceUrl (): Promise<string | undefined> {\n    return this.indexDb.getDBValueOrDefault(CONSTANTS.dbKeyPushPackageServiceUrl)\n  }\n\n  async getPlatform (): Promise<string | undefined> {\n    return this.indexDb.getDBValueOrDefault(CONSTANTS.dbKeyPlatform)\n  }\n\n  async getApplicationVersion (): Promise<string | undefined> {\n    return this.indexDb.getDBValueOrDefault(CONSTANTS.dbKeyApplicationVersion)\n  }\n\n  async getDeviceModel (): Promise<string | undefined> {\n    return this.indexDb.getDBValueOrDefault(CONSTANTS.dbKeyDeviceModel)\n  }\n\n  async getOsVersion (): Promise<string | undefined> {\n    return this.indexDb.getDBValueOrDefault(CONSTANTS.dbKeyOsVersion)\n  }\n\n  async getLanguage (): Promise<string | undefined> {\n    return this.indexDb.getDBValueOrDefault(CONSTANTS.dbKeyLanguage)\n  }\n\n  async getTimezone (): Promise<string | undefined> {\n    return this.indexDb.getDBValueOrDefault(CONSTANTS.dbKeyTimezone)\n  }\n\n  async getLoggingEnabled (): Promise<boolean> {\n    const flag = await this.indexDb.getDBValueOrDefault(CONSTANTS.dbKeyLoggingEnabled)\n    return flag?.toLowerCase() === 'true'\n  }\n\n  async setTimezone (value: string | undefined): Promise<void> {\n    await this.indexDb.setDBValue(CONSTANTS.dbKeyTimezone, value)\n  }\n\n  async setLanguage (value: string | undefined): Promise<void> {\n    await this.indexDb.setDBValue(CONSTANTS.dbKeyLanguage, value)\n  }\n\n  async setOsVersion (value: string | undefined): Promise<void> {\n    await this.indexDb.setDBValue(CONSTANTS.dbKeyOsVersion, value)\n  }\n\n  async setDeviceModel (value: string | undefined): Promise<void> {\n    await this.indexDb.setDBValue(CONSTANTS.dbKeyDeviceModel, value)\n  }\n\n  async setApplicationVersion (value: string | undefined): Promise<void> {\n    await this.indexDb.setDBValue(CONSTANTS.dbKeyApplicationVersion, value)\n  }\n\n  async setPlatform (value: string | undefined): Promise<void> {\n    await this.indexDb.setDBValue(CONSTANTS.dbKeyPlatform, value)\n  }\n\n  async setPushPackageServiceUrl (url: string | undefined): Promise<void> {\n    await this.indexDb.setDBValue(CONSTANTS.dbKeyPushPackageServiceUrl, url)\n  }\n\n  async setContactFieldValue (fieldValue: string | undefined): Promise<void> {\n    await this.indexDb.setDBValue(CONSTANTS.dbKeyContactFieldValue, fieldValue)\n  }\n\n  async setContactFieldId (fieldId: number | undefined): Promise<void> {\n    await this.indexDb.setDBValue(\n      CONSTANTS.dbKeyContactFieldId,\n      typeof fieldId === 'number' ? fieldId.toString() : undefined\n    )\n  }\n\n  async setMeClientServiceApiBaseUrl (url: string | undefined): Promise<void> {\n    await this.indexDb.setDBValue(CONSTANTS.dbKeyMeClientServiceApiBaseUrl, url)\n  }\n\n  async setMeDeviceEventServiceApiBaseUrl (url: string | undefined): Promise<void> {\n    await this.indexDb.setDBValue(CONSTANTS.dbKeyMeDeviceEventServiceApiBaseUrl, url)\n  }\n\n  async setPushToken (pushToken: string | undefined): Promise<void> {\n    await this.indexDb.setDBValue(CONSTANTS.dbKeyPushToken, pushToken)\n  }\n\n  async setServiceWorkerVersion (version: string | undefined): Promise<void> {\n    await this.indexDb.setDBValue(CONSTANTS.dbKeyServiceWorkerVersion, version)\n  }\n\n  async setSdkVersion (sdkVersion: string | undefined): Promise<void> {\n    await this.indexDb.setDBValue(CONSTANTS.dbKeySdkVersion, sdkVersion)\n  }\n\n  async setLastPermissionStatus (status: NotificationPermission | undefined): Promise<void> {\n    await this.indexDb.setDBValue(CONSTANTS.dbKeyLastPermissionStatus, status)\n  }\n\n  async setAppCode (appCode: string | undefined): Promise<void> {\n    await this.indexDb.setDBValue(CONSTANTS.dbKeyApplicationCode, appCode)\n    this.appCode = appCode\n  }\n\n  async setClientState (clientState: string | undefined): Promise<void> {\n    await this.indexDb.setDBValue(CONSTANTS.dbKeyXClientState, clientState)\n  }\n\n  async setContactToken (contactToken: string | undefined): Promise<void> {\n    await this.indexDb.setDBValue(CONSTANTS.dbKeyContactToken, contactToken)\n  }\n\n  async setRefreshToken (refreshToken: string | undefined): Promise<void> {\n    await this.indexDb.setDBValue(CONSTANTS.dbKeyRefreshToken, refreshToken)\n  }\n\n  private async setClientId (clientId: string | undefined): Promise<void> {\n    await this.indexDb.setDBValue(CONSTANTS.dbKeyBrowserId, clientId)\n  }\n\n  async setClientIdForAppCode (clientId: string | undefined, appCode: string): Promise<void> {\n    const browserIds = await this.getBrowserIdsFromDb()\n    if (clientId !== undefined) {\n      browserIds[appCode.toUpperCase()] = clientId\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete browserIds[appCode.toUpperCase()]\n    }\n    await this.indexDb.setDBValue(CONSTANTS.dbKeyBrowserIds, JSON.stringify(browserIds))\n  }\n\n  async setClientIds (clientIds: ClientIdList | undefined): Promise<void> {\n    await this.indexDb.setDBValue(CONSTANTS.dbKeyBrowserIds, JSON.stringify(clientIds))\n  }\n\n  async setDefaultNotificationIcon (icon: string | undefined): Promise<void> {\n    await this.indexDb.setDBValue(CONSTANTS.dbKeyDefaultNotificationIcon, icon)\n  }\n\n  async setDefaultNotificationTitle (icon: string | undefined): Promise<void> {\n    await this.indexDb.setDBValue(CONSTANTS.dbKeyDefaultNotificationTitle, icon)\n  }\n\n  async setServiceWorkerUrl (url: string | undefined): Promise<void> {\n    await this.indexDb.setDBValue(CONSTANTS.dbKeyServiceWorkerUrl, url)\n  }\n\n  async setServiceWorkerScope (scope: string | undefined): Promise<void> {\n    await this.indexDb.setDBValue(CONSTANTS.dbKeyServiceWorkerScope, scope)\n  }\n\n  async setApplicationServerPublicKey (key: string | undefined): Promise<void> {\n    await this.indexDb.setDBValue(CONSTANTS.dbKeyApplicationServerPublicKey, key)\n  }\n\n  async setInitParams (params: IInitParams | undefined) {\n    await this.indexDb.setDBValue(CONSTANTS.dbKeyInitParams, JSON.stringify(params))\n  }\n\n  async setWebsitePushId (id: string | undefined) {\n    await this.indexDb.setDBValue(CONSTANTS.dbKeyWebsitePushId, id)\n  }\n\n  async setLoggingEnabled (flag: boolean): Promise<void> {\n    await this.indexDb.setDBValue(CONSTANTS.dbKeyLoggingEnabled, `${flag}`)\n  }\n\n  async setLastUsedAt (): Promise<void> {\n    const d = new Date().toISOString()\n    await this.indexDb.setDBValue(CONSTANTS.dbKeyLastUsedAt, d)\n  }\n\n  async deleteLastUsedAt (): Promise<void> {\n    await this.indexDb.deleteDBKey(CONSTANTS.dbKeyLastUsedAt)\n  }\n\n  async clearAll (): Promise<void> {\n    await Promise.all([\n      this.setAppCode(undefined),\n      this.setClientState(undefined),\n      this.setContactToken(undefined),\n      this.setRefreshToken(undefined),\n      this.setDefaultNotificationIcon(undefined),\n      this.setDefaultNotificationTitle(undefined),\n      this.setServiceWorkerUrl(undefined),\n      this.setServiceWorkerScope(undefined),\n      this.setApplicationServerPublicKey(undefined),\n      this.setSdkVersion(undefined),\n      this.setServiceWorkerVersion(undefined),\n      this.setInitParams(undefined),\n      this.setWebsitePushId(undefined),\n      this.setPushPackageServiceUrl(undefined),\n      this.setLastPermissionStatus(undefined),\n      this.setPushToken(undefined),\n      this.setContactFieldId(undefined),\n      this.setContactFieldValue(undefined),\n      this.setPlatform(undefined),\n      this.setApplicationVersion(undefined),\n      this.setDeviceModel(undefined),\n      this.setTimezone(undefined),\n      this.setLanguage(undefined),\n      this.setOsVersion(undefined),\n      this.setMeClientServiceApiBaseUrl(undefined),\n      this.setMeDeviceEventServiceApiBaseUrl(undefined),\n      this.deleteLastUsedAt()\n    ])\n    this.appCode = undefined // clear the cache\n  }\n\n  static create (indexDb: IndexDb): MEWebPushDb {\n    return new MEWebPushDb(indexDb)\n  }\n}\n","import { indexedDbName, indexedDbVersion } from './constants'\n\nconst NotFoundMessage = 'not_found'\n\n/**\n * IndexedDb class handles browser's indexdb database operations\n */\nexport class IndexDb {\n  private name: string\n  private indexedDBInstance: IDBDatabase | undefined\n\n  constructor () {\n    this.name = 'keyValue'\n  }\n\n  /**\n   * Saves a value to browser's indexDb with a given key\n   */\n  async setDBValue (key: string, value: string | undefined): Promise<string> {\n    return this.openIndexDB().then((database: IDBDatabase) => {\n      return new Promise((resolve, reject) => {\n        const request = database\n          .transaction([this.name], 'readwrite')\n          .objectStore(this.name)\n          .put({ key, value })\n\n        request.onsuccess = () => {\n          this.indexedDBInstance = undefined\n          database.close()\n          return resolve(key)\n        }\n\n        request.onerror = (e) => {\n          this.indexedDBInstance = undefined\n          database.close()\n          return reject(e)\n        }\n      })\n    })\n  }\n\n  /**\n   * Saves a value to browser's indexDb with a given key\n   */\n  async deleteDBKey (key: IDBValidKey): Promise<boolean> {\n    return this.openIndexDB().then((database: IDBDatabase) => {\n      return new Promise((resolve, reject) => {\n        const request = database\n          .transaction([this.name], 'readwrite')\n          .objectStore(this.name)\n          .delete(key)\n\n        request.onsuccess = () => {\n          this.indexedDBInstance = undefined\n          database.close()\n          return resolve(true)\n        }\n\n        request.onerror = (e) => {\n          this.indexedDBInstance = undefined\n          database.close()\n          return reject(e)\n        }\n      })\n    })\n  }\n\n  /**\n   * Read a value from browser's indexDb\n   */\n  async getDBValue (key: string): Promise<string> {\n    const database: IDBDatabase = await this.openIndexDB()\n    return new Promise((resolve, reject) => {\n      const request = database\n        .transaction(this.name)\n        .objectStore(this.name)\n        .get(key)\n\n      request.onsuccess = () => {\n        const { result } = request\n        if (result) {\n          this.indexedDBInstance = undefined\n          database.close()\n          return resolve(result.value)\n        } else {\n          this.indexedDBInstance = undefined\n          database.close()\n          return reject(new Error(NotFoundMessage))\n        }\n      }\n\n      request.onerror = (event: Event) => {\n        this.indexedDBInstance = undefined\n        database.close()\n        return reject(event)\n      }\n    })\n  }\n\n  /**\n   * Read a value from browser's indexDb with fallback\n   */\n  async getDBValueOrDefault (key: string, defaultVal: string | undefined = undefined): Promise<string | undefined> {\n    try {\n      const result = await this.getDBValue(key)\n      return result\n    } catch (err) {\n      if (err.message === NotFoundMessage) {\n        return defaultVal\n      } else {\n        throw err\n      }\n    }\n  }\n\n  /**\n   * Opens browser's IndexDB database.\n   * If the database has opened already it doesn't reopen it but returns with the opened one.\n   */\n  private async openIndexDB (): Promise<IDBDatabase> {\n    return new Promise((resolve, reject) => {\n      if (this.indexedDBInstance) {\n        return resolve(this.indexedDBInstance)\n      }\n      const request = indexedDB.open(indexedDbName, indexedDbVersion)\n\n      request.onsuccess = (event: Event) => {\n        this.indexedDBInstance = (event.target! as any).result\n        return resolve(this.indexedDBInstance)\n      }\n\n      request.onerror = (event: Event) => {\n        return reject(event)\n      }\n\n      request.onupgradeneeded = (event: Event) => {\n        const database = (event.target! as any).result\n        database.createObjectStore('keyValue', {\n          keyPath: 'key'\n        })\n      }\n    })\n  }\n\n  static create (): IndexDb {\n    return new IndexDb()\n  }\n}\n","import { EmarsysServiceWorker } from './lib/emarsys-service-worker'\nimport { MEWebPushDb } from './lib/me-web-push-db'\nimport { IndexDb } from './lib/index-db'\n\nconst webPushDb = MEWebPushDb.create(IndexDb.create())\nconst worker = EmarsysServiceWorker.create(webPushDb)\n\nself.addEventListener('push', event => { worker.onPush(event as PushEvent) })\nself.addEventListener('notificationclick', event => worker.onNotificationClick(event as NotificationEvent))\nself.addEventListener('install', event => worker.onInstall(event as ExtendableEvent))\nself.addEventListener('pushsubscriptionchange',\n  event => worker.onSubscriptionChange(event as PushSubscriptionChangeEvent)\n)\n","import logging from './logging'\nimport {\n  pushActionsProperty,\n  pushIconProperty,\n  pushImageProperty,\n  pushLinkProperty,\n  pushTitleProperty\n} from './constants'\nimport { isValidPayload } from './utils'\nimport { MEWebPushDb } from './me-web-push-db'\nimport {\n  MEDeviceEventService,\n  MEEvent,\n  MEEventAttributes,\n  MEEventsRequestData,\n  PostEventsResult,\n  WebPushTreatments\n} from './me-device-event-service'\nimport { MEClientService } from './me-client-service'\nimport { MEV3ApiRequest } from './me-v3-api-request'\n\ndeclare const self: ServiceWorkerGlobalScope\n\ntype ActionButton = {\n  id: string\n  title: string\n  url: string\n}\n\ntype DbFallbackFn<T> = () => Promise<T | undefined>\ntype NotificationData<T> = { [key: string]: T }\n\nconst FailureResult: PostEventsResult = { success: false }\n\n/**\n * EmarsysServiceWorker class is responsible for receiving push notifications and shows the notification.\n */\nexport class EmarsysServiceWorker {\n  private webPushDb: MEWebPushDb\n  private meDeviceEventService?: MEDeviceEventService\n  private meClientService?: MEClientService\n\n  constructor (\n    webPushDb: MEWebPushDb\n  ) {\n    this.webPushDb = webPushDb\n  }\n\n  onInstall (event: ExtendableEvent): void {\n    event.waitUntil(this.handleInstall())\n  }\n\n  onPush (event: PushEvent): void {\n    event.waitUntil(this._onPush(event))\n  }\n\n  onNotificationClick (event: NotificationEvent): void {\n    event.waitUntil(this._onNotificationClick(event))\n  }\n\n  onSubscriptionChange (event: PushSubscriptionChangeEvent): void {\n    event.waitUntil(this._onSubscriptionChange())\n  }\n\n  private async _onPush (event: PushEvent): Promise<any> {\n    await this.setupLogging()\n\n    if (!('showNotification' in self.registration)) {\n      logging.Logger.warn('Showing of notifications is not enabled')\n      return\n    }\n    // eslint-disable-next-line\n    const payloadJson = event.data && event.data.json() ? event.data.json() : {}\n\n    if (!isValidPayload(payloadJson)) {\n      logging.Logger.warn('Invalid payload', payloadJson)\n      return\n    }\n    // @ts-expect-error\n    const notificationSettings = payloadJson.messageData.notificationSettings\n    return Promise.all([\n      this.getNotificationOption(\n      // @ts-expect-error\n        payloadJson, pushTitleProperty, () => this.webPushDb.getDefaultNotificationTitle('')\n      ),\n      this.getNotificationOption(\n        notificationSettings, pushIconProperty, () => this.webPushDb.getDefaultNotificationIcon(undefined)\n      ),\n      this.getNotificationOption(\n        notificationSettings, pushImageProperty, () => Promise.resolve(undefined)\n      ),\n      this.getNotificationOption<ActionButton[]>(\n        notificationSettings, pushActionsProperty, () => Promise.resolve(undefined)\n      )\n    ]).then(\n      ([notificationTitle, notificationIcon, notificationImage, notificationActions]:\n      [string | undefined, string | undefined, string | undefined, ActionButton[] | undefined]) => {\n        return this.showNotification(\n          // @ts-expect-error\n          payloadJson.message,\n          payloadJson,\n          notificationTitle as string,\n          notificationIcon,\n          notificationImage,\n          notificationActions ? this.createActionsFromActionButtons(notificationActions) : notificationActions\n        )\n      })\n  }\n\n  private async _onNotificationClick (event: NotificationEvent): Promise<any> {\n    await this.setupLogging()\n\n    logging.Logger.debug(`Notification clicked with Action: ${event.action}`)\n\n    event.notification.close()\n    const payload = event.notification.data\n\n    if (!payload.messageData.notificationSettings) {\n      return\n    }\n\n    let url = payload.messageData.notificationSettings[pushLinkProperty]\n\n    if (payload.messageData.notificationSettings[pushActionsProperty]) {\n      const buttonClicked = payload.messageData.notificationSettings[pushActionsProperty]\n        .find((actionButton: ActionButton) => actionButton.id === event.action)\n\n      if (buttonClicked) {\n        url = buttonClicked.url\n      }\n    }\n    // eslint-disable-next-line\n    const commands: Promise<unknown>[] = []\n\n    if (url) {\n      // eslint-disable-next-line\n      logging.Logger.debug(`Opening url: ${url}`)\n      commands.push(self.clients.openWindow(url))\n    }\n    commands.push(this.reportOpen(payload))\n\n    return Promise.all(commands)\n  }\n\n  private async _onSubscriptionChange (): Promise<any> {\n    try {\n      await this.setupLogging()\n      logging.Logger.debug('Subscription changed')\n\n      const applicationServerKey = await this.getApplicationServerKey()\n      logging.Logger.debug('Got applicationServerKey', JSON.stringify(applicationServerKey))\n\n      if (!applicationServerKey) {\n        logging.Logger.debug('Exiting registerNewSubscription')\n        return\n      }\n\n      logging.Logger.debug('Subscribing for new key')\n      const subscription: PushSubscription = await self.registration.pushManager\n        .subscribe({ userVisibleOnly: true, applicationServerKey })\n      logging.Logger.debug('Registering new subscription', subscription)\n      // eslint-disable-next-line\n      return this.registerNewSubscription(subscription, false)\n    } catch (err) {\n      logging.Logger.error('onSubscriptionChange: registerSubscription', err)\n    }\n  }\n\n  private async registerNewSubscription (\n    subscription: PushSubscription,\n    isRetry: boolean = false\n  ): Promise<void> {\n    const meClientSvc = await this.getMeClientService()\n    if (!meClientSvc) {\n      logging.Logger.error('Unable to get the ME client service!')\n      return\n    }\n    let success = await meClientSvc.registerPushToken(JSON.stringify(subscription))\n    if (success) {\n      logging.Logger.debug('Success register push token with backend')\n      return\n    }\n    if (isRetry) {\n      logging.Logger.error('Unable to register expired subscription', subscription)\n    } else {\n      success = await this.refreshContactToken(meClientSvc)\n      if (success) {\n        logging.Logger.debug('Successful refreshed the contact token')\n        await this.registerNewSubscription(subscription, true)\n      } else {\n        logging.Logger.error('Unable to register expired subscription', subscription)\n      }\n    }\n  }\n\n  private async getApplicationServerKey (): Promise<string | undefined> {\n    try {\n      const result = await this.webPushDb.getApplicationServerPublicKey()\n      if (!result) {\n        logging.Logger.error('application server key not set')\n      }\n      return result\n    } catch (err) {\n      logging.Logger.error('application server error', err)\n      return undefined\n    }\n  }\n\n  private async showNotification (\n    message: string,\n    payload: any,\n    notificationTitle: string,\n    notificationIcon: string | undefined,\n    notificationImage: string | undefined,\n    notificationActions: NotificationAction[] | undefined\n  ) {\n    const notificationOptions = {\n      body: message,\n      data: payload,\n      icon: notificationIcon,\n      image: notificationImage,\n      actions: notificationActions,\n      vibrate: [400, 100, 400]\n    }\n    return self.registration.showNotification(notificationTitle, notificationOptions)\n  }\n\n  /*\n   * Get an option for notification.\n   * If the given option is in the customData (sent in the push) this value will be used.\n   * Otherwise it tries to read a default value from browser's indexDb (saved on serviceworker registration).\n   * If value is not present in indexDb it use the defaultValue parameter.\n   */\n  private async getNotificationOption<T = string> (\n    notificationData: NotificationData<T>,\n    notificationDataPropertyName: string,\n    dbFallbackFn: DbFallbackFn<T>\n  ): Promise<T | undefined> {\n    // eslint-disable-next-line\n    if (notificationData && notificationData[notificationDataPropertyName]) {\n      return Promise.resolve(notificationData[notificationDataPropertyName])\n    }\n    return dbFallbackFn()\n  }\n\n  private async handleInstall (): Promise<void> {\n    try {\n      await this.setupLogging()\n      logging.Logger.debug('Install handler')\n      logging.Logger.debug('Storing service worker version', __VERSION__)\n      await this.webPushDb.setServiceWorkerVersion(__VERSION__)\n      logging.Logger.debug('Skipping waiting')\n      await self.skipWaiting()\n      logging.Logger.debug('Install done')\n    } catch (err) {\n      // this log shall be written if we could not access the webPushDb at all\n      logging.Logger.error(err, 'Install error!')\n    }\n  }\n\n  private async setupLogging (): Promise<void> {\n    const loggingEnabled = await this.webPushDb.getLoggingEnabled()\n    logging.enableLogger(loggingEnabled, logging.SwContext)\n  }\n\n  /**\n   * Calls Emarsys open API endpoint to register the user has opened the notification.\n   */\n  private async reportOpen (notificationData: any): Promise<void> {\n    const des = await this.getDeviceEventService()\n    if (!des) {\n      logging.Logger.error('Cannot report open! DES not initialized!', notificationData)\n      return\n    }\n    try {\n      logging.Logger.debug('Reporting open to DES', notificationData)\n      const sid: string | undefined = notificationData?.messageData?.sid\n      const treatments: WebPushTreatments | undefined = notificationData?.messageData?.treatments\n      let attributes: MEEventAttributes | undefined = sid ? { sid } : undefined\n      attributes = attributes ? treatments ? { ...attributes, treatments: JSON.stringify(treatments) } : attributes : undefined\n      const openData: MEEvent = {\n        type: 'internal', name: 'webpush:click', timestamp: new Date().toISOString(), attributes\n      }\n      const eventsData: MEEventsRequestData = { dnd: true, events: [openData], clicks: [], viewedMessages: [] }\n      const result = await des.postEvents(eventsData)\n      if (!result.success && result.statusCode === 401) {\n        await this.retrySendAfterContactTokenRefresh(des, eventsData)\n      }\n    } catch (err) {\n      logging.Logger.error('Fatal error while reporting open!', err.message, err)\n    }\n  }\n\n  private async retrySendAfterContactTokenRefresh (\n    des: MEDeviceEventService,\n    eventsData: MEEventsRequestData\n  ): Promise<PostEventsResult> {\n    const meClientSvc = await this.getMeClientService()\n    if (!meClientSvc) {\n      logging.Logger.error('Unable to get the ME client service!')\n      return FailureResult\n    }\n    const success = await this.refreshContactToken(meClientSvc)\n    if (!success) {\n      return FailureResult\n    }\n    return des.postEvents(eventsData)\n  }\n\n  private async refreshContactToken (meClientSvc: MEClientService): Promise<boolean> {\n    try {\n      const success = await meClientSvc.generateAccessToken()\n      if (!success) {\n        logging.Logger.error('refresh of access token failed')\n      }\n      return success\n    } catch (err) {\n      logging.Logger.error('unable to refresh contact token', err)\n      return false\n    }\n  }\n\n  private async getDeviceEventService (): Promise<MEDeviceEventService | undefined> {\n    try {\n      if (!this.meDeviceEventService) {\n        const baseUrl = await this.webPushDb.getMeDeviceEventServiceApiBaseUrl()\n        this.meDeviceEventService = MEDeviceEventService.create(baseUrl, MEV3ApiRequest.create(), this.webPushDb)\n      }\n      return this.meDeviceEventService\n    } catch (err) {\n      logging.Logger.error('Error initializing device event service!', err.message, err)\n    }\n  }\n\n  private async getMeClientService (): Promise<MEClientService | undefined> {\n    try {\n      if (!this.meClientService) {\n        const baseUrl = await this.webPushDb.getMeClientServiceApiBaseUrl()\n        this.meClientService = MEClientService.create(baseUrl, MEV3ApiRequest.create(), this.webPushDb)\n      }\n      return this.meClientService\n    } catch (err) {\n      logging.Logger.error('Error initializing client service!', err.message, err)\n    }\n  }\n\n  private createActionsFromActionButtons (actionButtons: ActionButton[]): NotificationAction[] {\n    return actionButtons.map(actionButton => ({\n      action: actionButton.id,\n      title: actionButton.title\n    }))\n  }\n\n  static create (webPushDb: MEWebPushDb): EmarsysServiceWorker {\n    return new EmarsysServiceWorker(webPushDb)\n  }\n}\n"],"sourceRoot":""}